Practical C#

- 속성에 set 접근자의 권한을 private를 하면 생성자를 통해서만 속성값 설정가능

- new 연산자는 클래스의 인스턴스를 생성하는데, 이는 메모리상에 확보된 클래스의 실체라고
생각하면 된다.

- 정적 클래스에는 인스턴스 속성이나 인스턴스 메서드가 없습니다.

- Person person = new Employee();
사원은 사람이므로 가능하다. 반대로는 안된다. Person 변수로 Employee 고유의 속성을
이용할 수는 없습니다.

U0714
- 정적메서드에서는 자기 자신의 인스턴스 메서드를 호출할 수 없다.

- 정적 클래스는 인스턴스를 생성할 수 없습니다. 인스턴스를 생성하지 않고도 FeetConverter
 클래스안에 있는 모든 멤버를 이용할 수 있으므로 인스턴스를 생성하는 의미가 없기 때문입니다.

U0720
- '어떻게 하는가(How)'가 아니라 '무엇을 하는가(What)'라는 것을 생각하면서 코드를 작성한다.

U0722
- 변수 선언과 초기화는 동시에 이뤄줘야 하는 것이 원칙입니다.
- 반복할 횟수를 알고있을 경우에는 for문을 사용하고, 반복할 횟수를 모를 경우에
 while문을 사용한다고 알고 있으면 됩니다.

U0726
- var message = GetMessage(code) ?? DefaultMessage()
null일 때는 DefaultMessage 메서드의 값을 넣으면 되니까 ?? 연산자를 써야겠구나.
- return sale?.Product
sale 변수가 null이 아닌 경우 Product 속성 값을 반환하고 null일 때는 Product 속성에 접근하지 않고
null을 반환합니다.
- 가변 인수
- using을 사용해 리소스를 정리한다. .

U0727
- == 연산자로는 대문자와 소문자가 구문됩니다. 구분하지 않으려면 String.Compare 메서드 사용

U0730
- StringBuilder를 사용해 문자열을 연결한다 string 객체는 문자열이 변하지 않는 객체이므로 잘 못하면 인스턴스가 엄청나게 생성되므로 CPU와 메모리 자원을 낭비하게 됨
- 반복 처리를 하지 않을 경우에는 '+'연산자로 문자열을 연결한다
- foreach 문 등을 통해 반복해서 문자열을 연결할 경우에는 StringBuilder를 사용한다
- 단, 적은 횟수로 반복한다면 '+' 연산자를 사용한다
